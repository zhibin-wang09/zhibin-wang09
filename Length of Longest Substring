class Solution:
    def lengthOfLongestSubstring(self, s: str) -> int:
        if len(s) == 0 :
            return 0
        elif len(s) == 1:
            return 1
        
        l,r,longest = 0,1,0 # l = left frame, r = right frame
        mapu = {s[l]:1} #Insert first character because we use right frame as the main pointer.
        
        while l<len(s) and r<len(s):
            if s[r] in mapu: #If we find repeating character we move the left frame until no more repeating exists.
                del mapu[s[l]] 
                l+=1
            else: #If we don't find repeating character then we will advance right frame and add it to hash map.
                mapu[s[r]] = 1
                r += 1
                if len(mapu)>longest: #Update longest substring.
                    longest = len(mapu)
            
        return longest
